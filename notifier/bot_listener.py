"""
Telegram –ë–æ—Ç ‚Äî –≥–æ–ª–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏.
–ö–æ–º–∞–Ω–¥–∏: /start /status /phase /equity /report /tca /risk /tradeon /tradeoff /mode
"""
import os, json, telebot
from analytics.phase_report import current_phase, plot_phase_timeline
from analytics.equity_report import compute_kpis, plot_equity
from analytics.tca import log_tca
from risk.smart_risk_curve import load_stats
from core.trade_switch import set_trading, is_trading_enabled

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML") if BOT_TOKEN else None

def _load(path, default):
    if not os.path.exists(path): 
        return default
    try:
        return json.load(open(path))
    except:
        return default

if bot:
    @bot.message_handler(commands=["start"])
    def start(msg):
        bot.reply_to(msg, (
            "ü§ñ <b>SmartTraderBot v8.3 Pro</b> –∞–∫—Ç–∏–≤–Ω–∏–π ‚úÖ\n\n"
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n"
            "/phase ‚Äî –ø–æ—Ç–æ—á–Ω–∞ —Ñ–∞–∑–∞ —Ä–∏–Ω–∫—É\n"
            "/equity ‚Äî –≥—Ä–∞—Ñ—ñ–∫ –±–∞–ª–∞–Ω—Å—É\n"
            "/report ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π KPI-–∑–≤—ñ—Ç\n"
            "/tca ‚Äî –∫–æ–º—ñ—Å—ñ—ó —Ç–∞ –≤–∏—Ç—Ä–∞—Ç–∏\n"
            "/risk ‚Äî —Å—Ç–∞–Ω —Ä–∏–∑–∏–∫—ñ–≤\n"
            "/tradeon /tradeoff ‚Äî –≤–º–∏–∫–∞–Ω–Ω—è –∞–±–æ –≤–∏–º–∫–Ω–µ–Ω–Ω—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ\n"
            "/mode ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∂–∏–º (—Ä–µ–∞–ª—å–Ω–∏–π –∞–±–æ —Å–∏–º—É–ª—è—Ü—ñ—è)"
        ))

    @bot.message_handler(commands=["status"])
    def status(msg):
        bot.reply_to(msg, f"‚öôÔ∏è <b>–†–µ–∂–∏–º —Ç–æ—Ä–≥—ñ–≤–ª—ñ:</b> {'‚úÖ –£–í–Ü–ú–ö–ù–ï–ù–û' if is_trading_enabled() else '‚õîÔ∏è –í–ò–ú–ö–ù–ï–ù–û'}")

    @bot.message_handler(commands=["tradeon"])
    def trade_on(msg):
        set_trading(True)
        bot.reply_to(msg, "‚úÖ –¢–æ—Ä–≥—ñ–≤–ª—è <b>–£–í–Ü–ú–ö–ù–ï–ù–ê</b>")

    @bot.message_handler(commands=["tradeoff"])
    def trade_off(msg):
        set_trading(False)
        bot.reply_to(msg, "üõë –¢–æ—Ä–≥—ñ–≤–ª—è <b>–í–ò–ú–ö–ù–ï–ù–ê</b>")

    @bot.message_handler(commands=["phase"])
    def phase_cmd(msg):
        rec = current_phase()
        if not rec:
            bot.reply_to(msg, "‚ùå –§–∞–∑–∞ —Ä–∏–Ω–∫—É –Ω–∞—Ä–∞–∑—ñ –Ω–µ–≤—ñ–¥–æ–º–∞.")
            return
        phase, regime = rec.get("phase"), rec.get("regime")
        scores = rec.get("scores", {})
        txt = (
            f"üåç <b>–§–∞–∑–∞ —Ä–∏–Ω–∫—É</b>: {phase} ({regime})\n"
            f"üìà vol1h={scores.get('vol1h','?')} | "
            f"trend={scores.get('trend_slope','?')} | "
            f"spikeZ={scores.get('spike_z','?')}"
        )
        bot.reply_to(msg, txt)
        p = plot_phase_timeline(7)
        if p:
            with open(p, "rb") as f:
                bot.send_photo(msg.chat.id, f, caption="üìä –Ü—Å—Ç–æ—Ä—ñ—è —Ñ–∞–∑–∏ —Ä–∏–Ω–∫—É –∑–∞ 7 –¥–Ω—ñ–≤")

    @bot.message_handler(commands=["equity"])
    def equity(msg):
        path = plot_equity()
        kpis = compute_kpis()
        if not path:
            bot.reply_to(msg, "‚ö†Ô∏è –Ü—Å—Ç–æ—Ä—ñ—è —Ç–æ—Ä–≥—ñ–≤ –≤—ñ–¥—Å—É—Ç–Ω—è.")
            return
        caption = (
            f"üí∞ <b>–ó–≤—ñ—Ç –ø–æ –±–∞–ª–∞–Ω—Å—É</b>\n"
            f"üìä –£–≥–æ–¥: {kpis.get('trades',0)}\n"
            f"üèÜ –í–∏–≥—Ä–∞—à–Ω–∏—Ö: {kpis.get('winrate',0):.1f}%\n"
            f"üìà –ü—Ä–∏–±—É—Ç–∫–æ–≤—ñ—Å—Ç—å: {kpis.get('gross',0)*100:.2f}%\n"
            f"üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –ø—Ä–æ—Å–∞–¥–∫–∞: {kpis.get('max_dd',0)*100:.2f}%"
        )
        with open(path, "rb") as f:
            bot.send_photo(msg.chat.id, f, caption=caption)

    @bot.message_handler(commands=["report"])
    def report(msg):
        kpis = compute_kpis()
        hist = _load("state/trade_history.json", [])
        txt = (
            f"üìä <b>KPI –ó–≤—ñ—Ç –ø–æ —Ç–æ—Ä–≥—ñ–≤–ª—ñ</b>\n"
            f"–£–≥–æ–¥: {kpis.get('trades',0)} | –í–∏–≥—Ä–∞—à–Ω–∏—Ö: {kpis.get('winrate',0):.1f}%\n"
            f"–°–µ—Ä–µ–¥–Ω—ñ–π –ø—Ä–∏–±—É—Ç–æ–∫: {kpis.get('avg',0)*100:.3f}% | –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {kpis.get('max_dd',0)*100:.2f}%\n"
            f"–ó–∞–≥–∞–ª—å–Ω–∏–π PnL: {kpis.get('gross',0)*100:.2f}%"
        )
        bot.reply_to(msg, txt)

    @bot.message_handler(commands=["tca"])
    def tca_report(msg):
        tca = _load("state/tca_events.json", [])
        if not tca:
            bot.reply_to(msg, "‚Äî –ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö TCA-–¥–∞–Ω–∏—Ö.")
            return
        total_fee = sum(e.get("fee",0) for e in tca)
        avg_fee = total_fee / max(len(tca),1)
        txt = (
            f"üßæ <b>–ó–≤—ñ—Ç –ø–æ –∫–æ–º—ñ—Å—ñ—è—Ö (TCA)</b>\n"
            f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π: {len(tca)}\n"
            f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫–æ–º—ñ—Å—ñ—è: ${total_fee:.2f}\n"
            f"–°–µ—Ä–µ–¥–Ω—è –∫–æ–º—ñ—Å—ñ—è –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é: ${avg_fee:.2f}"
        )
        bot.reply_to(msg, txt)

    @bot.message_handler(commands=["risk"])
    def risk_cmd(msg):
        s = load_stats()
        txt = (
            f"‚öñÔ∏è <b>–°—Ç–∞–Ω —Ä–∏–∑–∏–∫—ñ–≤</b>\n"
            f"üìà –ü–æ—Ç–æ—á–Ω–∏–π PnL: {s.get('pnl',0)*100:.2f}%\n"
            f"üîπ –°–µ—Ä—ñ—è –≤–∏–≥—Ä–∞—à—ñ–≤: {s.get('win_streak',0)} | üî∏ –°–µ—Ä—ñ—è –ø—Ä–æ–≥—Ä–∞—à—ñ–≤: {s.get('loss_streak',0)}"
        )
        bot.reply_to(msg, txt)

    @bot.message_handler(commands=["mode"])
    def mode_cmd(msg):
        dry = os.getenv("DRY_RUN", "False").lower() == "true"
        if dry:
            bot.reply_to(msg, "üß™ <b>–†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü—ñ—ó</b> ‚Äî DRY_RUN=True\n(–æ—Ä–¥–µ—Ä–∞ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—é—Ç—å—Å—è –Ω–∞ –±—ñ—Ä–∂—É)")
        else:
            bot.reply_to(msg, "üí∞ <b>–†–µ–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º</b> ‚Äî DRY_RUN=False\n(—É–≥–æ–¥–∏ –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è –Ω–∞ MEXC)")

def run_bot():
    if not bot:
        print("Telegram –±–æ—Ç –≤–∏–º–∫–Ω–µ–Ω–æ (–Ω–µ–º–∞—î TOKEN).")
        return

    print("Telegram –±–æ—Ç –ø—Ä–∞—Ü—é—î —á–µ—Ä–µ–∑ webhook‚Ä¶")

    # –ó–Ω—è—Ç–∏ —Å—Ç–∞—Ä–∏–π webhook, —è–∫—â–æ –±—É–≤
    bot.remove_webhook()

    # –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–æ–≤–∏–π webhook –¥–ª—è Railway
    railway_url = os.getenv("RAILWAY_URL")  # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: https://your-app.up.railway.app
    if not railway_url:
        print("‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—è –∑–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ RAILWAY_URL.")
        return

    bot.set_webhook(url=f"{railway_url}/{BOT_TOKEN}")


