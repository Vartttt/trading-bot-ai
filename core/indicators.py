import pandas as pd
import ta
from ai.transformer_trainer import predict_strength


def enrich(df: pd.DataFrame) -> pd.DataFrame:
    """
    üß© –û–±—Ä–æ–±–ª—è—î –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –∑ –±—ñ—Ä–∂—ñ:
    –¥–æ–¥–∞—î EMA, MACD, RSI, ATR, –æ–±—á–∏—Å–ª—é—î vol-z —Ç–∞ —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª—É (AI).
    """
    if df is None or df.empty:
        print("‚ö†Ô∏è enrich: –æ—Ç—Ä–∏–º–∞–Ω–æ –ø–æ—Ä–æ–∂–Ω—ñ–π DataFrame")
        return df

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏
    required_cols = {"close", "high", "low", "volume"}
    if not required_cols.issubset(df.columns):
        print(f"‚ö†Ô∏è enrich: –≤—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: {required_cols - set(df.columns)}")
        return df

    x = df.copy()

    try:
        # üìà EMA
        x["ema9"] = ta.trend.EMAIndicator(close=x["close"], window=9).ema_indicator()
        x["ema21"] = ta.trend.EMAIndicator(close=x["close"], window=21).ema_indicator()

        # üìä MACD
        macd = ta.trend.MACD(close=x["close"])
        x["macd"] = macd.macd()
        x["macds"] = macd.macd_signal()

        # üí™ RSI
        x["rsi"] = ta.momentum.RSIIndicator(close=x["close"], window=14).rsi()

        # üìâ ATR
        atr = ta.volatility.AverageTrueRange(
            high=x["high"], low=x["low"], close=x["close"], window=14
        )
        x["atr"] = atr.average_true_range()

        # üîä Volume Z-score (volz)
        if x["volume"].notna().sum() >= 20:
            vol_mean = x["volume"].tail(20).mean()
            vol_std = x["volume"].tail(20).std() or 1
            x["volz"] = (x["volume"] - vol_mean) / vol_std
        else:
            x["volz"] = 0.0

        x.dropna(inplace=True)
        if x.empty:
            print("‚ö†Ô∏è enrich: –ø—ñ—Å–ª—è –æ–±—á–∏—Å–ª–µ–Ω—å –∑–∞–ª–∏—à–∏–ª–æ—Å—å 0 —Ä—è–¥–∫—ñ–≤.")
            return df

        # üß© –§–æ—Ä–º—É–≤–∞–Ω–Ω—è features –¥–ª—è AI-–º–æ–¥–µ–ª—ñ
        last = x.iloc[-1]
        features = {
            "ema_diff5": float(last["ema9"] - last["ema21"]),
            "rsi5": float(last["rsi"]),
            "atr": float(last["atr"]),
            "volz5": float(last["volz"]),
        }

        # üß† AI –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è —Å–∏–ª–∏ —Å–∏–≥–Ω–∞–ª—É
        try:
            strength = float(predict_strength(features))
            x.loc[:, "signal_strength"] = strength
            print(f"ü§ñ AI signal_strength: {strength:.2f}")
        except Exception as ai_error:
            print(f"‚ö†Ô∏è enrich: –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É predict_strength: {ai_error}")
            x.loc[:, "signal_strength"] = 50.0  # –¥–µ—Ñ–æ–ª—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è

        return x

    except Exception as e:
        print(f"‚ùå enrich: –ø–æ–º–∏–ª–∫–∞ —É —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∞—Ö ‚Äî {e}")
        return df


