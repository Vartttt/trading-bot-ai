"""
Async Trading Loop ‚Äî –≥–æ–ª–æ–≤–Ω–∏–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π —Ü–∏–∫–ª –¥–ª—è SmartTraderBot v8.4 Pro.

‚öôÔ∏è –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:
  ‚úÖ –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ 10‚Äì30 —Å–∏–º–≤–æ–ª—ñ–≤ –±–µ–∑ –±–ª–æ–∫—É–≤–∞–Ω—å.
  ‚úÖ –ü–æ–≤–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ AsyncEngine (engine/async_executor.py).
  ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ç—ñ –∂ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏, —Ä–∏–∑–∏–∫, TP/SL, Telegram.
  ‚úÖ DRY_RUN / LIVE —Ä–µ–∂–∏–º —Å—É–º—ñ—Å–Ω–∏–π —ñ–∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º–∏ –≤–µ—Ä—Å—ñ—è–º–∏.
"""

import os
import asyncio
import time
from datetime import datetime

# üîó –Ü–º–ø–æ—Ä—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤
from engine.async_executor import AsyncEngine, MDRequest, TradeIntent
from core.indicators import enrich
from core.data_feed import get_ohlcv
from core.trade_switch import is_trading_enabled
from core.trade_manager import open_signal_trade
from indicators.signal_strength import compute_signal_strength
from risk.smart_risk_curve import get_dynamic_risk
from risk.smart_tp_sl_curve import calc_smart_tp_sl
from core.phase_filter import filter_symbol_phase
from core.market_phase import load_phase_cache
from notifier.telegram_notifier import send_message

# --- –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 30))
SYMBOLS = os.getenv(
    "SYMBOLS",
    "BTC/USDT,ETH/USDT,SOL/USDT,BNB/USDT,XRP/USDT,TON/USDT,PEPE/USDT"
).split(",")
MIN_STRENGTH = int(os.getenv("MIN_STRENGTH", "72"))
DRY_RUN = os.getenv("DRY_RUN", "True").lower() == "true"

# --- AsyncEngine (—Å–ø—ñ–ª—å–Ω–∏–π –¥–ª—è –≤—Å—ñ—î—ó —Å–µ—Å—ñ—ó)
engine = AsyncEngine()


# ============================================================
# üìä –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–∏—Ö –±–∞—Ä—ñ–≤
# ============================================================
async def on_market_data(md):
    """
    –ö–æ–ª–±–µ–∫ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –ø–æ –∫–æ–∂–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É.
    –û—Ç—Ä–∏–º—É—î {"symbol","timeframe","data":[ [ts,o,h,l,c,v], ... ]}
    """
    try:
        sym = md["symbol"]
        rows = md["data"]
        if not rows or len(rows) < 50:
            return

        import pandas as pd
        df = pd.DataFrame(rows, columns=["ts", "open", "high", "low", "close", "volume"])
        df["ts"] = pd.to_datetime(df["ts"], unit="ms")
        x = enrich(df)
        if x is None or x.empty:
            return

        # —Ñ–∞–∑–æ–≤–∏–π —Ñ—ñ–ª—å—Ç—Ä (—Ä—ñ–≤–µ–Ω—å —Ç—Ä–µ–Ω–¥—É/—Ä–µ–≥—ñ–º)
        df1h = get_ohlcv(sym, timeframe="1h", limit=200)
        df4h = get_ohlcv(sym, timeframe="4h", limit=200)
        global_phase = load_phase_cache() or {}
        mult, comment, local_phase, local_regime = filter_symbol_phase(
            enrich(df1h) if df1h is not None else None,
            enrich(df4h) if df4h is not None else None,
            global_phase
        )

        # –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ
        last = x.iloc[-1]
        data = {
            "rsi": float(last.get("rsi", 50)),
            "macd": float(last.get("macd", 0)),
            "macd_signal": float(last.get("macds", 0)),
            "ema_fast": float(last.get("ema9", last.close)),
            "ema_slow": float(last.get("ema21", last.close)),
            "volume": float(last.get("volume", 1)),
            "avg_volume": float(x["volume"].tail(50).mean() or 1),
            "price": float(last.close),
            "atr": float(last.get("atr", last.close * 0.01)),
            "momentum": float(last.close - x["close"].iloc[-5])
        }

        # —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª—É
        weights = {}
        s = compute_signal_strength(data, weights)
        strength = int(s["strength"] * mult)
        direction = s["direction"]

        # —Ä–∏–∑–∏–∫ / TP / SL
        risk_pct, risk_mode = get_dynamic_risk()
        tp_off, sl_off = calc_smart_tp_sl(data["atr"], strength, risk_mode)

        if strength < MIN_STRENGTH:
            return

        msg = (
            f"üìà <b>{sym}</b> | –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª—É: <b>{strength}%</b> ({direction})\n"
            f"–§–∞–∑–∞: {local_phase} ({local_regime})\n"
            f"–†–∏–∑–∏–∫: {risk_mode} ({risk_pct*100:.2f}%)\n"
            f"TP‚âà{tp_off:.5f} | SL‚âà{sl_off:.5f}"
        )
        send_message(msg)

        # --- –¢–æ—Ä–≥—ñ–≤–µ–ª—å–Ω–∞ –¥—ñ—è
        if not is_trading_enabled() or DRY_RUN:
            send_message(f"üß™ DRY_RUN ‚Üí –±–µ–∑ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –æ—Ä–¥–µ—Ä–∞ ({sym})")
            return

        await engine.submit_trade(
            TradeIntent(
                symbol=sym,
                side="buy" if direction == "long" else "sell",
                qty=0.02,  # –ø—Ä–∏–±–ª–∏–∑–Ω–æ $20/–ø–æ–∑
                type="market",
                on_exec=lambda res: send_message(f"‚úÖ –û—Ä–¥–µ—Ä –≤–∏–∫–æ–Ω–∞–Ω–æ: {res['symbol']} ({res['status']})")
            )
        )

    except Exception as e:
        send_message(f"‚ö†Ô∏è on_market_data error: {e}")


# ============================================================
# üöÄ –û—Å–Ω–æ–≤–Ω–∏–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π —Ü–∏–∫–ª
# ============================================================
async def async_main():
    send_message("üöÄ Async Trading Loop —Å—Ç–∞—Ä—Ç—É—î...")
    await engine.start()

    try:
        # –ø–æ—Å—Ç—ñ–π–Ω–∞ –ø–æ–¥–∞—á–∞ –¥–∞–Ω–∏—Ö
        while True:
            tasks = []
            for sym in SYMBOLS:
                req = MDRequest(symbol=sym, timeframe="15m", limit=200, on_data=on_market_data)
                tasks.append(engine.submit_md(req))
            await asyncio.gather(*tasks)
            await asyncio.sleep(CHECK_INTERVAL)
    except asyncio.CancelledError:
        pass
    except Exception as e:
        send_message(f"üí• Main loop error: {e}")
    finally:
        await engine.stop()
        send_message("üõë Async Loop –∑—É–ø–∏–Ω–µ–Ω–æ.")


if __name__ == "__main__":
    asyncio.run(async_main())
