# core/health_monitor.py
"""
Health Monitor Pro ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä—è—î:
  ‚úÖ latency –±—ñ—Ä–∂—ñ
  ‚úÖ –±–∞–ª–∞–Ω—Å –∞–∫–∞—É–Ω—Ç–∞
  ‚úÖ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è API rate-limit
  ‚úÖ —Ä–µ–∞–≥—É—î –≤ Telegram –ø—Ä–∏ –∑–±–æ—è—Ö
"""

import time, statistics, traceback
from notifier.telegram_notifier import send_message

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –≤–∏–º—ñ—Ä—ñ–≤ –¥–ª—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ –ø–æ—Ä–æ–≥—É
PING_HISTORY = []
API_CALLS = []
BALANCE_CACHE = {"ts": 0, "value": 0.0}

# --- CONFIG (—á–µ—Ä–µ–∑ ENV –∞–±–æ –¥–µ—Ñ–æ–ª—Ç–∏)
MAX_LATENCY_SEC = 2.5
MAX_API_CALLS_PER_MIN = 180     # –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –±—ñ—Ä–∂—ñ (MEXC ‚âà 300/min)
MIN_BALANCE_USDT = 15.0         # –Ω–∏–∂—á–µ —Ü—å–æ–≥–æ ‚Äî —Å—Ç–æ–ø

def ping_exchange(ex):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –±—ñ—Ä–∂—ñ –π latency.
    –ü–æ–≤–µ—Ä—Ç–∞—î True/False.
    """
    try:
        t0 = time.time()
        ex.fetch_ticker("BTC/USDT")
        dt = time.time() - t0
        PING_HISTORY.append(dt)
        if len(PING_HISTORY) > 25:
            PING_HISTORY.pop(0)
        avg = statistics.mean(PING_HISTORY)

        # –æ—Ü—ñ–Ω–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
        if dt > MAX_LATENCY_SEC or dt > avg * 2.5:
            send_message(f"‚ö†Ô∏è <b>High latency</b>: {dt:.2f}s (avg={avg:.2f}s)")
        return True
    except Exception as e:
        send_message(f"üö´ <b>Exchange ping failed</b>: {e}")
        return False

def check_balance(ex):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –±–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–Ω—ñ–º –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Ç–æ—Ä–≥—ñ–≤.
    """
    global BALANCE_CACHE
    try:
        if time.time() - BALANCE_CACHE["ts"] < 60:
            return True, BALANCE_CACHE["value"]
        bal = ex.fetch_balance()
        usdt = float(((bal or {}).get("total") or {}).get("USDT", 0))
        BALANCE_CACHE = {"ts": time.time(), "value": usdt}
        if usdt < MIN_BALANCE_USDT:
            send_message(f"üí∞ <b>Low balance alert</b>: {usdt:.2f} USDT ‚Äî trading paused.")
            return False, usdt
        return True, usdt
    except Exception as e:
        send_message(f"‚ö†Ô∏è Balance fetch error: {e}")
        return False, 0.0

def track_api_call():
    """
    –†–µ—î—Å—Ç—Ä—É—î API –≤–∏–∫–ª–∏–∫–∏, —â–æ–± –≤–∏—è–≤–∏—Ç–∏ rate-limit.
    """
    t = time.time()
    API_CALLS.append(t)
    while API_CALLS and t - API_CALLS[0] > 60:
        API_CALLS.pop(0)
    count = len(API_CALLS)
    if count > MAX_API_CALLS_PER_MIN * 0.9:
        send_message(f"‚ö†Ô∏è <b>API load high</b>: {count}/min (limit {MAX_API_CALLS_PER_MIN})")
    return count

def exchange_ok(ex):
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:
    - –≤–∏–∫–ª–∏–∫–∞—î ping_exchange()
    - –ø–µ—Ä–µ–≤—ñ—Ä—è—î –±–∞–ª–∞–Ω—Å
    - –ø–µ—Ä–µ–≤—ñ—Ä—è—î API rate
    """
    try:
        track_api_call()
        if not ping_exchange(ex):
            return False
        ok, usdt = check_balance(ex)
        if not ok:
            send_message("‚õîÔ∏è Trading halted ‚Äî balance check failed.")
            return False
        return True
    except Exception as e:
        send_message(f"üí• Health monitor error: {traceback.format_exc()}")
        return False
