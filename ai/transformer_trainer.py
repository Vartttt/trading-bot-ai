# ==============================
# ‚úÖ UNIVERSAL IMPORT & MODEL_DIR HANDLER
# ==============================
import os
import sys

# –ü–æ—Ç–æ—á–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è —Ñ–∞–π–ª—É (ai/)
current_dir = os.path.dirname(os.path.abspath(__file__))

# –ö–æ—Ä–µ–Ω–µ–≤–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –ø—Ä–æ—î–∫—Ç—É (/workspaces/)
root_dir = os.path.abspath(os.path.join(current_dir, ".."))

# –î–æ–¥–∞—î–º–æ root —É sys.path
if root_dir not in sys.path:
    sys.path.append(root_dir)

# –Ü–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó (config/config.py)
try:
    from config.config import MODEL_DIR
except ModuleNotFoundError:
    print("‚ö†Ô∏è  –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –º–æ–¥—É–ª—å 'config'. –°–ø—Ä–æ–±—É—é –¥–æ–¥–∞—Ç–∏ —à–ª—è—Ö –≤—Ä—É—á–Ω—É...")
    sys.path.append(os.path.join(root_dir, "config"))
    from config import config
    MODEL_DIR = getattr(config, "MODEL_DIR", os.path.join(root_dir, "models"))
    print("‚úÖ MODEL_DIR —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –ø—ñ—Å–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —à–ª—è—Ö—É.")

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è MODEL_DIR
os.makedirs(MODEL_DIR, exist_ok=True)
print(f"‚úÖ MODEL_DIR –∞–∫—Ç–∏–≤–Ω–∏–π —à–ª—è—Ö: {MODEL_DIR}")

# ==============================
# üîö END OF UNIVERSAL IMPORT FIX
# ==============================
import json
import time
import traceback
import requests
import numpy as np
import pandas as pd
import torch
import torch.nn as nn
import ta
from torch.utils.data import DataLoader, Dataset
from sklearn.preprocessing import StandardScaler
from joblib import dump, load

# ============================================================
# ‚öôÔ∏è –®–ª—è—Ö–∏
# ============================================================
MODEL_PATH = os.path.join(MODEL_DIR, "transformer_signal_model.pt")
SCALER_PATH = os.path.join(MODEL_DIR, "transformer_scaler.joblib")
TRAIN_DATA_PATH = os.path.join(MODEL_DIR, "train_data.json")

# ============================================================
# ‚öôÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö —Å–≤—ñ—á–æ–∫
# ============================================================
def load_training_data(symbol="BTCUSDT", interval="15m", limit=20000):
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ —Å–≤—ñ—á–∫–∏ –∑ MEXC —ñ —Ñ–æ—Ä–º—É—î DataFrame
    """
    print(f"üìä –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é {limit} —Å–≤—ñ—á–æ–∫ –∑ MEXC –¥–ª—è {symbol} ({interval})...")
    url = f"https://api.mexc.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}"

    try:
        r = requests.get(url, timeout=15)
        data = r.json()
        if not isinstance(data, list) or len(data) == 0:
            raise ValueError("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å API MEXC")

        df = pd.DataFrame(data, columns=[
            "open_time", "open", "high", "low", "close", "volume",
            "close_time", "quote_asset_volume", "trades", "taker_base",
            "taker_quote", "ignore"
        ])
        df = df.astype({"open": float, "high": float, "low": float, "close": float, "volume": float})
        df.dropna(inplace=True)

        # –¢–µ—Ö–Ω—ñ—á–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
        df["ema_diff5"] = df["close"].ewm(span=9).mean() - df["close"].ewm(span=21).mean()
        df["rsi5"] = ta.momentum.RSIIndicator(df["close"], 14).rsi()
        df["atr"] = ta.volatility.AverageTrueRange(df["high"], df["low"], df["close"], 14).average_true_range()
        df["volz5"] = (df["volume"] - df["volume"].rolling(20).mean()) / (df["volume"].rolling(20).std() + 1e-9)
        df.dropna(inplace=True)

        df = df.tail(limit)
        df_out = df[["ema_diff5", "rsi5", "atr", "volz5"]].to_dict(orient="records")

        os.makedirs(os.path.dirname(TRAIN_DATA_PATH), exist_ok=True)
        with open(TRAIN_DATA_PATH, "w") as f:
            json.dump(df_out, f, indent=2)

        print(f"‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {TRAIN_DATA_PATH} ({len(df_out)} —Ä—è–¥–∫—ñ–≤)")
        return df_out

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó: {e}")
        return []


# ============================================================
# üß† Dataset
# ============================================================
class SignalDataset(Dataset):
    def __init__(self, data, seq_len=50):
        X, y = [], []
        for i in range(len(data) - seq_len):
            seq = data[i:i + seq_len, :-1]
            target = data[i + seq_len, -1]
            X.append(seq)
            y.append(target)
        self.X = np.array(X, dtype=np.float32)
        self.y = np.array(y, dtype=np.float32)

    def __len__(self):
        return len(self.X)

    def __getitem__(self, idx):
        return self.X[idx], self.y[idx]


# ============================================================
# üß© Transformer Model
# ============================================================
class SignalTransformer(nn.Module):
    def __init__(self, input_dim, embed_dim=64, n_heads=4, ff_dim=128, num_layers=2):
        super().__init__()
        self.embedding = nn.Linear(input_dim, embed_dim)
        encoder_layer = nn.TransformerEncoderLayer(
            d_model=embed_dim, nhead=n_heads, dim_feedforward=ff_dim, dropout=0.1, batch_first=True
        )
        self.encoder = nn.TransformerEncoder(encoder_layer, num_layers=num_layers)
        self.fc = nn.Sequential(
            nn.Linear(embed_dim, 64),
            nn.ReLU(),
            nn.Linear(64, 1),
            nn.Sigmoid()
        )

    def forward(self, x):
        x = self.embedding(x)
        encoded = self.encoder(x)
        out = encoded[:, -1, :]
        return self.fc(out)


# ============================================================
# üèãÔ∏è‚Äç‚ôÇÔ∏è Train / Save
# ============================================================
def train_transformer(epochs=15, batch_size=32, seq_len=50):
    if not os.path.exists(TRAIN_DATA_PATH):
        print("‚ö†Ô∏è –ù–µ–º–∞—î train_data.json ‚Äî —Å–ø–æ—á–∞—Ç–∫—É –∑–≥–µ–Ω–µ—Ä—É–π —ñ—Å—Ç–æ—Ä—ñ—é.")
        return

    with open(TRAIN_DATA_PATH, "r") as f:
        data = json.load(f)

    df = pd.DataFrame(data)
    if df.empty:
        print("‚ùå train_data.json –ø–æ—Ä–æ–∂–Ω—ñ–π!")
        return

    feature_cols = ["ema_diff5", "rsi5", "atr", "volz5"]
    df = df[feature_cols].fillna(0)
    df["strength"] = np.random.uniform(0, 1, len(df))  # —Ç–∏–º—á–∞—Å–æ–≤–∞ –º—ñ—Ç–∫–∞

    print(f"üìä –†—è–¥–∫—ñ–≤ –¥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {len(df)}")
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(df[feature_cols])
    dump(scaler, SCALER_PATH)

    y = df["strength"].values.reshape(-1, 1)
    data_mat = np.hstack([X_scaled, y])
    dataset = SignalDataset(data_mat, seq_len)

    if len(dataset) < 50:
        print("‚ö†Ô∏è Dataset –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∏–π ‚Äî –ø–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 100 —Ä—è–¥–∫—ñ–≤.")
        return

    loader = DataLoader(dataset, batch_size=batch_size, shuffle=True)
    model = SignalTransformer(input_dim=len(feature_cols))
    criterion = nn.BCELoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=1e-4)

    for epoch in range(epochs):
        total_loss = 0
        for Xb, yb in loader:
            optimizer.zero_grad()
            preds = model(Xb).squeeze()
            loss = criterion(preds, yb)
            loss.backward()
            optimizer.step()
            total_loss += loss.item()
        print(f"üß† Epoch {epoch+1}/{epochs} | Loss: {total_loss/len(loader):.6f}")

    torch.save(model.state_dict(), MODEL_PATH)
    print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {MODEL_PATH}")


# ============================================================
# üîÆ Predict
# ============================================================
def predict_strength(features_dict):
    try:
        feature_cols = ["ema_diff5", "rsi5", "atr", "volz5"]
        scaler = load(SCALER_PATH)
        model = SignalTransformer(input_dim=len(feature_cols))
        model.load_state_dict(torch.load(MODEL_PATH, map_location="cpu"))
        model.eval()

        x = np.array([[features_dict[c] for c in feature_cols]], dtype=float)
        x_scaled = scaler.transform(x)
        x_t = torch.tensor(x_scaled, dtype=torch.float32).unsqueeze(0)

        with torch.no_grad():
            pred = model(x_t).item()
        return float(pred * 100)

    except Exception as e:
        print(f"‚ö†Ô∏è predict_strength error: {e}")
        return 50.0


# ============================================================
# üöÄ Main (—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è)
# ============================================================
if __name__ == "__main__":
    if not os.path.exists(TRAIN_DATA_PATH):
        load_training_data(limit=20000)
    else:
        mtime = os.path.getmtime(TRAIN_DATA_PATH)
        age_hours = (time.time() - mtime) / 3600
        if age_hours > 24:
            print("üîÅ –û–Ω–æ–≤–ª—é—é train_data.json...")
            load_training_data(limit=20000)

    train_transformer(epochs=20, seq_len=10)




